import org.spongepowered.asm.gradle.plugins.MixinExtension

buildscript {
	repositories {
		mavenCentral()
		// These repositories are only for Gradle plugins, put any other repositories in the repository block further below
		maven(url = "https://repo.spongepowered.org/repository/maven-public/")
	}
	dependencies {
		classpath("org.spongepowered:mixingradle:0.7-SNAPSHOT")
	}
}

plugins {
	kotlin("jvm") version "[1.8,)"
	id("eclipse")
	id("idea")
	id("net.minecraftforge.gradle") version "[6.0.16,6.2)"
	id("org.parchmentmc.librarian.forgegradle") version "1.+"
}

apply(plugin = "org.spongepowered.mixin")

val mod_id: String by properties
val mod_version: String by properties

group = project.properties["mod_group_id"] as String
version = project.properties["mod_version"] as String

base {
	archivesName.set(mod_id)
}

java {
	toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
	mappings(project.properties["mapping_channel"] as String, project.properties["mapping_version"] as String)
	
	// enableIdeaPrepareRuns = true
	
	copyIdeResources = true
	
	// When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
	// The folder name can be set on a run configuration using the "folderName" property.
	// By default, the folder name of a run configuration is the name of the Gradle project containing it.
	// generateRunFolders = true
	
	// This property enables access transformers for use in development.
	// They will be applied to the Minecraft artifact.
	// The access transformer file can be anywhere in the project.
	// However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
	// This default location is a best practice to automatically put the file in the right place in the final jar.
	// See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
	// accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
	

	runs {
		configureEach {
			workingDirectory(project.file("run"))
			
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			property("forge.logging.markers", "REGISTRIES")
			
			
			property("forge.logging.console.level", "debug")
			
			mods {
				create(mod_id) {
					source(sourceSets.main.get())
				}
			}
		}
		
		create("client") {
			property("forge.enabledGameTestNamespaces", mod_id)
		}
		
		create("server") {
			property("forge.enabledGameTestNamespaces", mod_id)
			args("--nogui")
		}
		
		create("gameTestServer") {
			property("forge.enabledGameTestNamespaces", mod_id)
		}
		
		create("data") {
			workingDirectory(project.file("run-data"))
			
			args("--mod", mod_id, "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/"))
		}
	}
}

extensions.configure<MixinExtension>() {
	add (sourceSets.main.get(), "${mod_id}.refmap.json")
	
	config ("${mod_id}.mixins.json")
}

// Include resources generated by data generators.
sourceSets.main.get().resources { srcDir("src/generated/resources") }

repositories {
	maven {
		name = "Kotlin for Forge"
		url = uri("https://thedarkcolour.github.io/KotlinForForge/")
	}
}

dependencies {
	minecraft("net.minecraftforge:forge:${properties["minecraft_version"]}-${properties["forge_version"]}")
	
	annotationProcessor("org.spongepowered:mixin:0.8.5:processor")
	
	implementation("thedarkcolour:kotlinforforge:3.12.0")
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named<ProcessResources>("processResources").configure {
	val replaceProperties = mapOf(
			"minecraft_version" to project.properties["minecraft_version"] as String,
			"minecraft_version_range" to project.properties["minecraft_version_range"] as String,
			"forge_version" to project.properties["forge_version"] as String,
			"forge_version_range" to project.properties["forge_version_range"] as String,
			"loader_version_range" to project.properties["loader_version_range"] as String,
			"mod_id" to project.properties["mod_id"] as String,
			"mod_name" to project.properties["mod_name"] as String,
			"mod_license" to project.properties["mod_license"] as String,
			"mod_version" to project.properties["mod_version"] as String,
			"mod_authors" to project.properties["mod_authors"] as String,
			"mod_description" to project.properties["mod_description"] as String
	)
	
	inputs.properties(replaceProperties)
	
	filesMatching(listOf("META-INF/mods.toml", "pack.mcmeta")) {
		expand(replaceProperties + mapOf("project" to project))
	}
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named<Jar>("jar").configure {
	manifest {
		
	}
	
	// This is the preferred method to reobfuscate your jar file
	finalizedBy("reobfJar")
}

tasks.withType<JavaCompile>().configureEach {
	options.encoding = "UTF-8" // Use the UTF-8 charset for Java compilation
}
